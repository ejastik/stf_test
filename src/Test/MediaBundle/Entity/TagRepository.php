<?php

namespace Test\MediaBundle\Entity;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param array $order_by
     * @param null|integer $limit
     * @param null|integer $offset
     * @return array
     */
    public function getBy($order_by = [], $limit = null, $offset = null)
    {
        $em = $this->getEntityManager();

        $query = $em->createQueryBuilder()
            ->select('e')
            ->from($this->_entityName, 'e');

        if (
            (isset($order_by)) &&
            (gettype($order_by) == 'array') &&
            (!empty($order_by))
        )
        {
            $entityMetadata = $em->getClassMetadata($this->_entityName);

            foreach ($order_by as $field => $order)
            {
                if (
                    (strtoupper($order) != 'ASC') &&
                    (strtoupper($order) != 'DESC')
                )
                {
                    continue;
                }

                if ($entityMetadata->hasField($field))
                {
                    $query->addOrderBy('e.' . $field, $order);
                }
            }
        }

        if (
            ($offset) &&
            (preg_match('/^[1-9][0-9]*$/', $offset))
        )
        {
            $query->setFirstResult($offset);
        }

        if (
            ($limit) &&
            (preg_match('/^[1-9][0-9]*$/', $limit))
        )
        {
            $query->setMaxResults($limit);
        }

        return $query->getQuery()
            ->getResult();
    }

    /**
     * @param array $ids
     * @return Tag[]
     */
    public function getByIDList($ids = [])
    {
        if (empty($ids))
        {
            return [];
        }

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('e')
            ->from($this->_entityName, 'e')
            ->where('e.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return mixed
     */
    public function getTotalCount()
    {
        $em = $this->getEntityManager();

        $entityMetadata = $em->getClassMetadata($this->_entityName);

        $query = $em->createQueryBuilder()
            ->select('COUNT(DISTINCT e)')
            ->from($entityMetadata->name, 'e');

        return $query->getQuery()
            ->getSingleScalarResult();
    }
}
